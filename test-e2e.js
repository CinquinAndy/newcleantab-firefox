// Test e2e pour l'extension New Clean Tab
const { Builder, By, until } = require('selenium-webdriver')
const firefox = require('selenium-webdriver/firefox')
const fs = require('fs')
const path = require('path')
const AdmZip = require('adm-zip')

// Configuration
const EXTENSION_DIR = __dirname // Le r√©pertoire actuel o√π se trouve le manifest.json
const EXTENSION_ZIP = path.join(__dirname, 'new-clean-tab.zip')
const HOMEPAGE_TEST_URL = 'https://example.com' // URL de test facile √† charger

// Cr√©e un zip de l'extension
function createExtensionZip() {
	console.log("Cr√©ation du zip de l'extension...")
	const zip = new AdmZip()

	// Ajouter les fichiers essentiels
	const files = [
		'manifest.json',
		'newcleantab.html',
		'newcleantab.js',
		'background.js',
	]

	files.forEach(file => {
		const filePath = path.join(EXTENSION_DIR, file)
		if (fs.existsSync(filePath)) {
			zip.addLocalFile(filePath)
			console.log(`- Ajout de ${file}`)
		} else {
			console.warn(`‚ö†Ô∏è Fichier ${file} manquant`)
		}
	})

	// G√©n√©rer des ic√¥nes temporaires si elles n'existent pas
	;['icon48.png', 'icon96.png'].forEach(iconFile => {
		const iconPath = path.join(EXTENSION_DIR, iconFile)
		if (!fs.existsSync(iconPath)) {
			console.log(`- G√©n√©ration de l'ic√¥ne ${iconFile}`)
			// Cr√©er une ic√¥ne de placeholder - vous pouvez remplacer cela par une vraie g√©n√©ration d'ic√¥ne
			const size = iconFile === 'icon48.png' ? 48 : 96
			// Ici, nous supposons que vous cr√©ez manuellement ces ic√¥nes pour le moment
			console.warn(
				`‚ö†Ô∏è Ic√¥ne ${iconFile} manquante, veuillez la cr√©er manuellement`
			)
		} else {
			zip.addLocalFile(iconPath)
			console.log(`- Ajout de ${iconFile}`)
		}
	})

	// Sauvegarder le zip
	zip.writeZip(EXTENSION_ZIP)
	console.log(`‚úÖ Extension packag√©e dans ${EXTENSION_ZIP}`)

	return EXTENSION_ZIP
}

// Configurer Firefox pour charger l'extension temporairement
async function setupDriver() {
	const extensionPath = createExtensionZip()

	// Configurer Firefox pour utiliser l'extension
	const options = new firefox.Options()
		.setPreference('browser.startup.homepage', HOMEPAGE_TEST_URL)
		.setPreference('browser.newtabpage.enabled', false)
		.setPreference('browser.startup.page', 1) // Ouvrir la page d'accueil au d√©marrage
		.setPreference('devtools.console.stdout.content', true) // Afficher les logs console

	// Cr√©er le driver
	const driver = await new Builder()
		.forBrowser('firefox')
		.setFirefoxOptions(options)
		.build()

	// Installer l'extension temporairement
	const firefoxDriver =
		driver.getCapabilities().get('browserName') === 'firefox'
	if (firefoxDriver) {
		console.log("Installation de l'extension temporairement...")
		// En Selenium, il n'y a pas de m√©thode directe pour installer l'extension
		// C'est automatiquement g√©r√© par Firefox Developer Edition ou Nightly
		console.log(
			"‚ö†Ô∏è Note: Vous devez installer l'extension manuellement pour les tests"
		)
	}

	return driver
}

// Test de l'extension
async function testExtension() {
	let driver

	try {
		console.log('üöÄ D√©marrage des tests e2e...')
		driver = await setupDriver()

		// 1. Test d'ouverture d'un nouvel onglet
		console.log("Test 1: Ouverture d'un nouvel onglet...")
		await driver.executeScript(`
      window.open('about:newtab', '_blank');
    `)

		// Attendre un moment pour que la redirection se produise
		await driver.sleep(3000)

		// Obtenir tous les handles d'onglets
		const handles = await driver.getAllWindowHandles()
		console.log(`- ${handles.length} onglet(s) ouvert(s)`)

		// Basculer vers le nouvel onglet
		await driver.switchTo().window(handles[handles.length - 1])

		// 2. V√©rifier l'URL actuelle apr√®s redirection
		const currentUrl = await driver.getCurrentUrl()
		console.log(`- URL actuelle: ${currentUrl}`)

		// 3. V√©rifier si l'URL dans la barre d'adresse a √©t√© nettoy√©e
		// Remarque: Il est difficile de v√©rifier directement ce que l'utilisateur voit dans la barre d'adresse
		// On peut seulement v√©rifier l'URL r√©elle de la page
		if (currentUrl === 'about:blank' || currentUrl === 'about:newtab') {
			console.log('‚úÖ URL nettoy√©e avec succ√®s!')
		} else if (currentUrl === HOMEPAGE_TEST_URL) {
			console.log("‚úÖ Redirection vers la page d'accueil r√©ussie!")
			console.log("‚ö†Ô∏è L'URL n'a pas √©t√© nettoy√©e apr√®s redirection")
		} else {
			console.log(
				'‚ùå Comportement inattendu. URL ni nettoy√©e ni redirig√©e correctement.'
			)
		}

		// 4. Capturer une capture d'√©cran pour v√©rification manuelle
		const screenshot = await driver.takeScreenshot()
		fs.writeFileSync('test-result.png', screenshot, 'base64')
		console.log("üì∏ Capture d'√©cran sauvegard√©e dans test-result.png")

		console.log('üèÅ Tests termin√©s !')
	} catch (error) {
		console.error('‚ùå Erreur lors des tests:', error)
	} finally {
		if (driver) {
			await driver.quit()
			console.log('üßπ Driver Selenium ferm√©')
		}
	}
}

// Lancer les tests
testExtension()
